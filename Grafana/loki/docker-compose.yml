services:
  read:
    image: grafana/loki:3.0.0
    container_name: read-loki
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    depends_on:
      - minio-log
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      didan:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    container_name: write-loki
    ports:
      - 3102:3100
      - 7946
      - 9095
    command: "-config.file=/etc/loki/config.yaml -target=write"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio-log
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    networks:
      <<: *loki-dns

  minio-log:
    image: minio/minio
    container_name: minio-log
    entrypoint: # Command để chạy MinIO
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=didannguyen # Username của MinIO
      - MINIO_ROOT_PASSWORD=17052002 # Password của MinIO
      - MINIO_PROMETHEUS_AUTH_TYPE=public # Cấu hình cho Prometheus
      - MINIO_UPDATE=off # Tắt cập nhật tự động
      - LANG=en_US.UTF-8
      - TZ=Asia/Ho_Chi_Minh
    ports:
      - 9000
    volumes:
      - ./data/minio-log:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - didan

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning # Cấu hình cho provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=false # Tắt chế độ ẩn danh
      - GF_SECURITY_ADMIN_USER=admin # Tài khoản quản trị viên mặc định
      - GF_SECURITY_ADMIN_PASSWORD=17052002 # Mật khẩu mặc định
      - GF_USERS_ALLOW_SIGN_UP=false # Không cho phép đăng ký mới
      - GF_USERS_AUTO_ASSIGN_ORG=true # Tự động gán tổ chức
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Editor # Vai trò mặc định cho người dùng mới
      - GF_AUTH_BASIC_ENABLED=true # Bật xác thực cơ bản
      - GF_AUTH_DISABLE_LOGIN_FORM=false # Hiển thị form đăng nhập
      - GF_AUTH_DISABLE_SIGNOUT_MENU=false # Hiển thị menu đăng xuất
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    volumes:
      - ./observability/grafana/grafana-config.yml:/etc/grafana/provisioning/datasources/datasource.yml # Cấu hình datasource
      - grafana-data:/var/lib/grafana # Lưu trữ dữ liệu Grafana
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - didan

  backend:
    image: grafana/loki:3.0.0
    container_name: backend-loki
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false" # Command để chạy backend
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml # Mount file cấu hình vào container
    ports:
      - "3100"
      - "7946"
    depends_on:
      - gateway
    networks:
      - didan

  gateway:
    image: nginx:latest
    container_name: gateway-nginx
    depends_on:
      - read
      - write
    ports:
      - "3100:3100"
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - didan

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - didan

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100" # Tempo
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "9411:9411" # Zipkin
      - "14268:14268" # Jaeger Thrift HTTP
      - "14250:14250" # Jaeger gRPC
      - "6831:6831/udp" # Jaeger Thrift Compact
      - "6832:6832/udp" # Jaeger Thrift Binary
    volumes:
      - ./observability/tempo/tempo-config.yml:/etc/tempo-config.yml
    networks:
      - didan
  
  alloy: # Service alloy của Grafana dùng để xử lý dữ liệu từ Loki
    image: grafana/alloy-dev:latest # Sử dụng image của Alloy
    volumes:
      - ./observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro # Mount file cấu hình vào container với quyền read-only
      - /var/run/docker.sock:/var/run/docker.sock # Mount Docker socket vào container để Alloy có thể truy cập vào Docker
    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy # Command để chạy Alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway # Phụ thuộc vào service gateway, điều hướng traffic hệ thống ghi logs
    networks:
      - didan # Sử dụng network didan

networks:
  didan:
    driver: bridge

volumes:
  grafana-data:
    driver: local